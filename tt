using Autofac;
using BackgroundServicess.Authentication.Model;
using BackgroundServicess.DependencyInjection;
using BackgroundServicess.HangfireScheduler;
using BackgroundServicess.Models;
using BackgroundServicess.Rpc.Hubs;
using Hangfire;
using Hangfire.SqlServer;
using HangfireBasicAuthenticationFilter;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.IdentityModel.Tokens;
using Newtonsoft.Json;
using Serilog;
using System;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;

namespace BackgroundServices
{
    public class Program
    {
        private static T GetSection<T>(string name, IConfigurationRoot configurationRoot)
        {
            var settings = configurationRoot.GetSection("HangfireSettings").Get<Dictionary<string, object>>();
            var json = System.Text.Json.JsonSerializer.Serialize(settings);
            return System.Text.Json.JsonSerializer.Deserialize<T>(json);
        }
        public static void Main(string[] args) => CreateHostBuilder(args).Build().Run();

        public static IHostBuilder CreateHostBuilder(string[] args) =>
            Host.CreateDefaultBuilder(args)
                .UseWindowsService(c =>
                {
                    c.ServiceName = "RapahcureLiveService";
                }).ConfigureWebHostDefaults(builder =>
                {
                    IConfigurationRoot configuration = new ConfigurationBuilder()
                           .SetBasePath(AppDomain.CurrentDomain.BaseDirectory)
                           .AddJsonFile("appsettings.json")
                           .Build();

                    var hangfireSettings = GetSection<HangfireSettings>("HangfireSettings", configuration);

                    builder.Configure(app =>
                    {

                        app.UseRouting();


                        app.UseHangfireDashboard(hangfireSettings.DashboardUrl, new DashboardOptions
                        {
                            //AppPath = "" //The path for the Back To Site link. Set to null in order to hide the Back To  Site link.
                            DashboardTitle = hangfireSettings.Title,
                            Authorization = new[]
                            {
                                    new HangfireCustomBasicAuthenticationFilter{
                                        User = hangfireSettings.UserName,
                                        Pass = hangfireSettings.Password
                                    }
                             }
                        });

                        app.UseCors("CorsPolicy");

                        app.UseEndpoints(endpoints =>
                        {
                            endpoints.MapHangfireDashboard();
                            endpoints.MapHub<WorkerNotificationHub>(nameof(WorkerNotificationHub));
                        });

                    });
                })
                .ConfigureServices((hostContext, services) =>
                {
                    var builder = new ContainerBuilder();

                    GlobalConfiguration.Configuration.UseAutofacActivator(builder.Build(), false);


                    IConfigurationRoot configuration = new ConfigurationBuilder()
                            .SetBasePath(AppDomain.CurrentDomain.BaseDirectory)
                            .AddJsonFile("appsettings.json")
                            .Build();


                    services.Configure<ConnectionStrings>(configuration.GetSection("ConnectionStrings"));
                    services.Configure<ThirdPartyUrl>(configuration.GetSection("ThirdPartyUrl"));
                    services.Configure<AppKeys>(configuration.GetSection("AppKeys"));
                    services.Configure<JwtSettings>(configuration.GetSection("JwtSettings"));



                    var serilogLogPath = configuration.GetSection("SerilogPath");

                    var hangfireSettings = GetSection<HangfireSettings>("HangfireSettings", configuration);

                    Log.Logger = new LoggerConfiguration()
                       .MinimumLevel.Debug()
                       .WriteTo.Console()
                       .WriteTo.File(serilogLogPath.Value, rollingInterval: RollingInterval.Day)
                       .CreateLogger();


                    // register all dependencies 
                    services.Register();


                    var serviceProvider = services.BuildServiceProvider();

                    // Add Hangfire services.
                    services.AddHangfire(configuration => configuration
                        .SetDataCompatibilityLevel(CompatibilityLevel.Version_170)
                        .UseSimpleAssemblyNameTypeSerializer()
                        .UseSerilogLogProvider()
                        .UseFilter(new QueueFilter())
                        .UseSerializerSettings(new JsonSerializerSettings() { ReferenceLoopHandling = ReferenceLoopHandling.Ignore })
                        .UseSqlServerStorage(hangfireSettings.ConnectionString, new SqlServerStorageOptions
                        {
                            CommandBatchMaxTimeout = TimeSpan.FromMinutes(5),
                            SlidingInvisibilityTimeout = TimeSpan.FromMinutes(5),
                            QueuePollInterval = TimeSpan.Zero,
                            UseRecommendedIsolationLevel = true,
                            DisableGlobalLocks = true,
                        }).WithJobExpirationTimeout(TimeSpan.FromHours(1)));


                    var q = hangfireSettings.Queues.Split(',');

                    services.AddHangfireServer(options =>
                    {
                        options.Queues = q;
                    });



                    ///jwt configuration 
                    services.AddAuthentication(x =>
                    {
                        x.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
                        x.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
                    }).AddCookie(options =>
                    {
                        // Cookie settings
                        options.Cookie.Name = "Raphacure";
                        options.Cookie.HttpOnly = true;
                        options.ExpireTimeSpan = TimeSpan.FromMinutes(10);
                        options.SlidingExpiration = true;
                    })
                    .AddJwtBearer(options =>
                    {
                        options.RequireHttpsMetadata = false;
                        options.SaveToken = true;
                        options.TokenValidationParameters = new TokenValidationParameters
                        {
                            ValidateIssuer = false,
                            ValidateAudience = false,
                            ValidateLifetime = true,
                            ValidateIssuerSigningKey = true,
                            IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(configuration["JwtSettings:SecretKey"])),
                        };
                        options.Events = new JwtBearerEvents
                        {
                            OnMessageReceived = context =>
                            {
                                var accessToken = context.Request.Query["access_token"];

                                // If the request is for our hub...
                                var path = context.HttpContext.Request.Path;
                                if (!string.IsNullOrEmpty(accessToken) &&
                                    (path.StartsWithSegments("/WorkerNotificationHub")))
                                {
                                    // Read the token out of the query string
                                    context.Token = accessToken;
                                }
                                return Task.CompletedTask;
                            }
                        };
                    });


                    services.AddCors(options => options.AddPolicy("CorsPolicy",
                        builder =>
                        {
                            builder.AllowAnyHeader()
                                   .AllowAnyMethod()
                                   .SetIsOriginAllowed((host) => true)
                                   .AllowCredentials();
                        }));

                    services.AddSignalR();
                });
    }
}
